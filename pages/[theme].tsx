import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

type ThemeId = "fire" | "water" | "grass" | "none";

export default function Home({ theme }: { theme: ThemeId }) {
  /**
   * Logic to set the theme cookie, here using an API route and Set-Cookie header
   * (you could use client-side JavaScript as well)
   */
  const switchTheme = async (theme: ThemeId) => {
    const switchThemeUrl = new URL(
      "/api/switch-theme",
      window.location.toString()
    );
    switchThemeUrl.searchParams.set("theme", theme);
    await fetch(switchThemeUrl);
    // the response will set a "theme" cookie
    // now we refresh to trigger our edge middleware
    window.location.reload();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Segmented Rendering Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title + " " + styles[theme]}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          It{"'"}s dangerous to go alone! Pick your theme.
        </p>
        <p className={styles["bg" + theme]}>
          <em>Current theme: {theme}</em>
        </p>

        <div className={styles.grid}>
          <a
            onClick={() => {
              switchTheme("fire");
            }}
            className={styles.card + " " + styles.fire}
          >
            <h2>Fire</h2>
            <p>It{"'"}s a hot topic</p>
          </a>

          <a
            onClick={() => {
              switchTheme("water");
            }}
            className={styles.card + " " + styles.water}
          >
            <h2>Water</h2>
            <p>Stay hydrated homies</p>
          </a>

          <a
            onClick={() => {
              switchTheme("grass");
            }}
            className={styles.card + " " + styles.grass}
          >
            <h2>Grass</h2>
            <p>I love dollars</p>
          </a>

          <a
            onClick={() => {
              switchTheme(null);
            }}
            className={styles.card}
          >
            <h2>Reset</h2>
            <p>I really want to go alone</p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://github.com/lbke/segmented-rendering-demo">
          Contribute to this demo here:
          https://github.com/lbke/segmented-rendering-demo
        </a>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const params = [
    // homepage without theme
    { theme: "none" },
    // we voluntarily omit "grass" to demo using ISR
    { theme: "fire" },
    { theme: "water" },
  ];
  return {
    paths: params.map(({ theme }) => ({ params: { theme } })),
    // less common combinations will be dynamically server-rendered on 1st request thanks to ISR
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const theme = context.params?.theme;
  if (!theme) return { props: { theme: "none" } };
  if (typeof theme !== "string") throw new Error(`Invalid theme ${theme}`);
  if (["fire", "water", "grass", "none"].includes(theme))
    return {
      props: {
        theme,
      },
    };

  throw new Error(`Invalid theme ${theme}`);
};
